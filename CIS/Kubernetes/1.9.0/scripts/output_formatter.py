# scripts/output_formatter.py
import os
import csv
import xml.etree.ElementTree as ET
from jinja2 import Template

def save_results_as_text(results, output_path):
    with open(output_path, 'w') as f:
        for result in results:
            f.write(f"No: {result['no']}\n")
            f.write(f"Test Case Group: {result['group']}\n")
            f.write(f"Test Case: {result['test_case']}\n")
            f.write(f"Status: {result['status']}\n")
            f.write(f"Description: {result['description']}\n")
            f.write(f"Mitigation: {result['mitigation']}\n")
            f.write("\n")

def save_results_as_csv(results, output_path):
    with open(output_path, 'w', newline='') as f:
        writer = csv.DictWriter(f, fieldnames=['no', 'group', 'test_case', 'status', 'description', 'mitigation'])
        writer.writeheader()
        for result in results:
            writer.writerow(result)

def save_results_as_html(results, output_path):
    html_template = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>CIS Scan Results</title>
    </head>
    <body>
        <h1>CIS Scan Results</h1>
        <table border="1">
            <tr>
                <th>No</th>
                <th>Test Case Group</th>
                <th>Test Case</th>
                <th>Status</th>
                <th>Description</th>
                <th>Mitigation</th>
            </tr>
            {% for result in results %}
            <tr>
                <td>{{ result['no'] }}</td>
                <td>{{ result['group'] }}</td>
                <td>{{ result['test_case'] }}</td>
                <td>{{ result['status'] }}</td>
                <td>{{ result['description'] }}</td>
                <td>{{ result['mitigation'] }}</td>
            </tr>
            {% endfor %}
        </table>
    </body>
    </html>
    """
    template = Template(html_template)
    html_content = template.render(results=results)
    with open(output_path, 'w') as f:
        f.write(html_content)

def save_results_as_xml(results, output_path):
    root = ET.Element('CISScanResults')
    for result in results:
        test_case_element = ET.SubElement(root, 'TestCase')
        for key, value in result.items():
            child = ET.SubElement(test_case_element, key.capitalize())
            child.text = value
    tree = ET.ElementTree(root)
    tree.write(output_path)
