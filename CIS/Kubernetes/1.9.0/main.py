# main.py
import os
import importlib
import argparse
from scripts import output_formatter

# Define paths
CIS_DIR = os.path.join('CIS', 'Kubernetes', '1.9.0', '1_Control Plane Components')
TEST_CASES_DIR = os.path.join(CIS_DIR, 'test_cases')
RESULTS_DIR = os.path.join(CIS_DIR, 'results')

# Ensure results directory exists
os.makedirs(RESULTS_DIR, exist_ok=True)

# Run CIS scan based on user-defined options
def run_cis_scan(output_format, test_case=None):
    test_cases_module = importlib.import_module('CIS.Kubernetes.1.9.0.1_Control Plane Components.test_cases.1_1_Control_Plane_Node_Configuration_Files')
    
    if test_case:
        # Run a specific test case
        try:
            run_test_case = getattr(test_cases_module, f'run_test_case_{test_case.replace(".", "_")}')
            results = [run_test_case()]
        except AttributeError:
            raise ValueError(f"Test case {test_case} not found.")
    else:
        # Run all test cases
        results = test_cases_module.run_all_tests()
    
    output_path = os.path.join(RESULTS_DIR, f'results.{output_format.lower()}')
    if output_format.lower() == 'text':
        output_formatter.save_results_as_text(results, output_path)
    elif output_format.lower() == 'csv':
        output_formatter.save_results_as_csv(results, output_path)
    elif output_format.lower() == 'html':
        output_formatter.save_results_as_html(results, output_path)
    elif output_format.lower() == 'xml':
        output_formatter.save_results_as_xml(results, output_path)
    else:
        raise ValueError("Unsupported output format. Use 'text', 'csv', 'html', or 'xml'.")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run CIS scan and generate output in various formats.')
    parser.add_argument('-output', '-o', type=str, required=True, help="Output format (e.g., HTML, CSV, XML, TEXT)")
    parser.add_argument('-test_case', '-tc', type=str, help="Specific test case to run (e.g., 1.1.1)")
    
    args = parser.parse_args()
    
    try:
        run_cis_scan(args.output, args.test_case)
    except ValueError as e:
        print(e)
        parser.print_help()
