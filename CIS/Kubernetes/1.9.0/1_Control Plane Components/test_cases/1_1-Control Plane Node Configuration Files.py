import os
import pwd
import grp

def check_file_permissions(file_path, expected_permissions):
    """Check if the file permissions are equal or more restrictive than expected."""
    file_stat = os.stat(file_path)
    actual_permissions = oct(file_stat.st_mode & 0o777)
    return actual_permissions <= expected_permissions

def check_file_ownership(file_path, expected_user, expected_group):
    """Check if the file ownership matches the expected user and group."""
    file_stat = os.stat(file_path)
    actual_user = pwd.getpwuid(file_stat.st_uid).pw_name
    actual_group = grp.getgrgid(file_stat.st_gid).gr_name
    return actual_user == expected_user and actual_group == expected_group

def check_directory_permissions(directory_path, expected_permissions):
    """Check if the directory permissions are equal or more restrictive than expected."""
    directory_stat = os.stat(directory_path)
    actual_permissions = oct(directory_stat.st_mode & 0o777)
    return actual_permissions <= expected_permissions

def check_directory_ownership(directory_path, expected_user, expected_group):
    """Check if the directory ownership matches the expected user and group."""
    directory_stat = os.stat(directory_path)
    actual_user = pwd.getpwuid(directory_stat.st_uid).pw_name
    actual_group = grp.getgrgid(directory_stat.st_gid).gr_name
    return actual_user == expected_user and actual_group == expected_group

def check_files_ownership_in_directory(directory_path, expected_user, expected_group):
    """Check if all files within the directory have the expected ownership."""
    for root, dirs, files in os.walk(directory_path):
        for name in dirs + files:
            path = os.path.join(root, name)
            if not check_file_ownership(path, expected_user, expected_group):
                return False
    return True

def run_test_case_1_1_1():
    file_path = '/path/to/api/server/pod/specification/file'
    expected_permissions = '0o600'
    try:
        if check_file_permissions(file_path, expected_permissions):
            result = {
                'no': '1.1.1',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the API server pod specification file permissions are set to 600 or more restrictive',
                'status': 'Passed',
                'description': f'The file permissions are set to {expected_permissions}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.1',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the API server pod specification file permissions are set to 600 or more restrictive',
                'status': 'Failed',
                'description': f'The file permissions are not set to {expected_permissions}.',
                'mitigation': f'Set the file permissions to {expected_permissions}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.1',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the API server pod specification file permissions are set to 600 or more restrictive',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_2():
    file_path = '/path/to/api/server/pod/specification/file'
    expected_user = 'root'
    expected_group = 'root'
    try:
        if check_file_ownership(file_path, expected_user, expected_group):
            result = {
                'no': '1.1.2',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the API server pod specification file ownership is set to root:root',
                'status': 'Passed',
                'description': f'The file ownership is set to {expected_user}:{expected_group}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.2',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the API server pod specification file ownership is set to root:root',
                'status': 'Failed',
                'description': f'The file ownership is not set to {expected_user}:{expected_group}.',
                'mitigation': f'Set the file ownership to {expected_user}:{expected_group}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.2',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the API server pod specification file ownership is set to root:root',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_3():
    file_path = '/path/to/controller/manager/pod/specification/file'
    expected_permissions = '0o600'
    try:
        if check_file_permissions(file_path, expected_permissions):
            result = {
                'no': '1.1.3',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the controller manager pod specification file permissions are set to 600 or more restrictive',
                'status': 'Passed',
                'description': f'The file permissions are set to {expected_permissions}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.3',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the controller manager pod specification file permissions are set to 600 or more restrictive',
                'status': 'Failed',
                'description': f'The file permissions are not set to {expected_permissions}.',
                'mitigation': f'Set the file permissions to {expected_permissions}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.3',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the controller manager pod specification file permissions are set to 600 or more restrictive',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_4():
    file_path = '/path/to/controller/manager/pod/specification/file'
    expected_user = 'root'
    expected_group = 'root'
    try:
        if check_file_ownership(file_path, expected_user, expected_group):
            result = {
                'no': '1.1.4',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the controller manager pod specification file ownership is set to root:root',
                'status': 'Passed',
                'description': f'The file ownership is set to {expected_user}:{expected_group}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.4',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the controller manager pod specification file ownership is set to root:root',
                'status': 'Failed',
                'description': f'The file ownership is not set to {expected_user}:{expected_group}.',
                'mitigation': f'Set the file ownership to {expected_user}:{expected_group}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.4',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the controller manager pod specification file ownership is set to root:root',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_5():
    file_path = '/path/to/scheduler/pod/specification/file'
    expected_permissions = '0o600'
    try:
        if check_file_permissions(file_path, expected_permissions):
            result = {
                'no': '1.1.5',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the scheduler pod specification file permissions are set to 600 or more restrictive',
                'status': 'Passed',
                'description': f'The file permissions are set to {expected_permissions}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.5',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the scheduler pod specification file permissions are set to 600 or more restrictive',
                'status': 'Failed',
                'description': f'The file permissions are not set to {expected_permissions}.',
                'mitigation': f'Set the file permissions to {expected_permissions}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.5',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the scheduler pod specification file permissions are set to 600 or more restrictive',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_6():
    file_path = '/path/to/scheduler/pod/specification/file'
    expected_user = 'root'
    expected_group = 'root'
    try:
        if check_file_ownership(file_path, expected_user, expected_group):
            result = {
                'no': '1.1.6',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the scheduler pod specification file ownership is set to root:root',
                'status': 'Passed',
                'description': f'The file ownership is set to {expected_user}:{expected_group}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.6',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the scheduler pod specification file ownership is set to root:root',
                'status': 'Failed',
                'description': f'The file ownership is not set to {expected_user}:{expected_group}.',
                'mitigation': f'Set the file ownership to {expected_user}:{expected_group}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.6',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the scheduler pod specification file ownership is set to root:root',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_7():
    file_path = '/path/to/etcd/pod/specification/file'
    expected_permissions = '0o600'
    try:
        if check_file_permissions(file_path, expected_permissions):
            result = {
                'no': '1.1.7',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the etcd pod specification file permissions are set to 600 or more restrictive',
                'status': 'Passed',
                'description': f'The file permissions are set to {expected_permissions}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.7',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the etcd pod specification file permissions are set to 600 or more restrictive',
                'status': 'Failed',
                'description': f'The file permissions are not set to {expected_permissions}.',
                'mitigation': f'Set the file permissions to {expected_permissions}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.7',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the etcd pod specification file permissions are set to 600 or more restrictive',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_8():
    file_path = '/path/to/etcd/pod/specification/file'
    expected_user = 'root'
    expected_group = 'root'
    try:
        if check_file_ownership(file_path, expected_user, expected_group):
            result = {
                'no': '1.1.8',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the etcd pod specification file ownership is set to root:root',
                'status': 'Passed',
                'description': f'The file ownership is set to {expected_user}:{expected_group}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.8',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the etcd pod specification file ownership is set to root:root',
                'status': 'Failed',
                'description': f'The file ownership is not set to {expected_user}:{expected_group}.',
                'mitigation': f'Set the file ownership to {expected_user}:{expected_group}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.8',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the etcd pod specification file ownership is set to root:root',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_9():
    file_path = '/path/to/container/network/interface/file'
    expected_permissions = '0o600'
    try:
        if check_file_permissions(file_path, expected_permissions):
            result = {
                'no': '1.1.9',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the Container Network Interface file permissions are set to 600 or more restrictive',
                'status': 'Passed',
                'description': f'The file permissions are set to {expected_permissions}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.9',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the Container Network Interface file permissions are set to 600 or more restrictive',
                'status': 'Failed',
                'description': f'The file permissions are not set to {expected_permissions}.',
                'mitigation': f'Set the file permissions to {expected_permissions}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.9',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the Container Network Interface file permissions are set to 600 or more restrictive',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_10():
    file_path = '/path/to/container/network/interface/file'
    expected_user = 'root'
    expected_group = 'root'
    try:
        if check_file_ownership(file_path, expected_user, expected_group):
            result = {
                'no': '1.1.10',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the Container Network Interface file ownership is set to root:root',
                'status': 'Passed',
                'description': f'The file ownership is set to {expected_user}:{expected_group}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.10',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the Container Network Interface file ownership is set to root:root',
                'status': 'Failed',
                'description': f'The file ownership is not set to {expected_user}:{expected_group}.',
                'mitigation': f'Set the file ownership to {expected_user}:{expected_group}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.10',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the Container Network Interface file ownership is set to root:root',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_11():
    directory_path = '/path/to/etcd/data/directory'
    expected_permissions = '0o700'
    try:
        if check_directory_permissions(directory_path, expected_permissions):
            result = {
                'no': '1.1.11',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the etcd data directory permissions are set to 700 or more restrictive',
                'status': 'Passed',
                'description': f'The directory permissions are set to {expected_permissions}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.11',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the etcd data directory permissions are set to 700 or more restrictive',
                'status': 'Failed',
                'description': f'The directory permissions are not set to {expected_permissions}.',
                'mitigation': f'Set the directory permissions to {expected_permissions}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.11',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the etcd data directory permissions are set to 700 or more restrictive',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the directory and try again.'
        }
    return result

def run_test_case_1_1_12():
    directory_path = '/path/to/etcd/data/directory'
    expected_user = 'etcd'
    expected_group = 'etcd'
    try:
        if check_directory_ownership(directory_path, expected_user, expected_group):
            result = {
                'no': '1.1.12',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the etcd data directory ownership is set to etcd:etcd',
                'status': 'Passed',
                'description': f'The directory ownership is set to {expected_user}:{expected_group}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.12',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the etcd data directory ownership is set to etcd:etcd',
                'status': 'Failed',
                'description': f'The directory ownership is not set to {expected_user}:{expected_group}.',
                'mitigation': f'Set the directory ownership to {expected_user}:{expected_group}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.12',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the etcd data directory ownership is set to etcd:etcd',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the directory and try again.'
        }
    return result

def run_test_case_1_1_13():
    file_path = '/path/to/default/administrative/credential/file'
    expected_permissions = '0o600'
    try:
        if check_file_permissions(file_path, expected_permissions):
            result = {
                'no': '1.1.13',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the default administrative credential file permissions are set to 600',
                'status': 'Passed',
                'description': f'The file permissions are set to {expected_permissions}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.13',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the default administrative credential file permissions are set to 600',
                'status': 'Failed',
                'description': f'The file permissions are not set to {expected_permissions}.',
                'mitigation': f'Set the file permissions to {expected_permissions}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.13',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the default administrative credential file permissions are set to 600',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_14():
    file_path = '/path/to/default/administrative/credential/file'
    expected_user = 'root'
    expected_group = 'root'
    try:
        if check_file_ownership(file_path, expected_user, expected_group):
            result = {
                'no': '1.1.14',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the default administrative credential file ownership is set to root:root',
                'status': 'Passed',
                'description': f'The file ownership is set to {expected_user}:{expected_group}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.14',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the default administrative credential file ownership is set to root:root',
                'status': 'Failed',
                'description': f'The file ownership is not set to {expected_user}:{expected_group}.',
                'mitigation': f'Set the file ownership to {expected_user}:{expected_group}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.14',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the default administrative credential file ownership is set to root:root',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_15():
    file_path = '/path/to/scheduler.conf/file'
    expected_permissions = '0o600'
    try:
        if check_file_permissions(file_path, expected_permissions):
            result = {
                'no': '1.1.15',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the scheduler.conf file permissions are set to 600 or more restrictive',
                'status': 'Passed',
                'description': f'The file permissions are set to {expected_permissions}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.15',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the scheduler.conf file permissions are set to 600 or more restrictive',
                'status': 'Failed',
                'description': f'The file permissions are not set to {expected_permissions}.',
                'mitigation': f'Set the file permissions to {expected_permissions}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.15',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the scheduler.conf file permissions are set to 600 or more restrictive',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_16():
    file_path = '/path/to/scheduler.conf/file'
    expected_user = 'root'
    expected_group = 'root'
    try:
        if check_file_ownership(file_path, expected_user, expected_group):
            result = {
                'no': '1.1.16',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the scheduler.conf file ownership is set to root:root',
                'status': 'Passed',
                'description': f'The file ownership is set to {expected_user}:{expected_group}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.16',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the scheduler.conf file ownership is set to root:root',
                'status': 'Failed',
                'description': f'The file ownership is not set to {expected_user}:{expected_group}.',
                'mitigation': f'Set the file ownership to {expected_user}:{expected_group}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.16',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the scheduler.conf file ownership is set to root:root',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_17():
    file_path = '/path/to/controller-manager.conf/file'
    expected_permissions = '0o600'
    try:
        if check_file_permissions(file_path, expected_permissions):
            result = {
                'no': '1.1.17',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the controller-manager.conf file permissions are set to 600 or more restrictive',
                'status': 'Passed',
                'description': f'The file permissions are set to {expected_permissions}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.17',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the controller-manager.conf file permissions are set to 600 or more restrictive',
                'status': 'Failed',
                'description': f'The file permissions are not set to {expected_permissions}.',
                'mitigation': f'Set the file permissions to {expected_permissions}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.17',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the controller-manager.conf file permissions are set to 600 or more restrictive',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_18():
    file_path = '/path/to/controller-manager.conf/file'
    expected_user = 'root'
    expected_group = 'root'
    try:
        if check_file_ownership(file_path, expected_user, expected_group):
            result = {
                'no': '1.1.18',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the controller-manager.conf file ownership is set to root:root',
                'status': 'Passed',
                'description': f'The file ownership is set to {expected_user}:{expected_group}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.18',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the controller-manager.conf file ownership is set to root:root',
                'status': 'Failed',
                'description': f'The file ownership is not set to {expected_user}:{expected_group}.',
                'mitigation': f'Set the file ownership to {expected_user}:{expected_group}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.18',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the controller-manager.conf file ownership is set to root:root',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_19():
    directory_path = '/path/to/kubernetes/pki/directory'
    expected_user = 'root'
    expected_group = 'root'
    try:
        if check_directory_ownership(directory_path, expected_user, expected_group) and check_files_ownership_in_directory(directory_path, expected_user, expected_group):
            result = {
                'no': '1.1.19',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the Kubernetes PKI directory and file ownership is set to root:root',
                'status': 'Passed',
                'description': f'The directory and file ownership is set to {expected_user}:{expected_group}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.19',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the Kubernetes PKI directory and file ownership is set to root:root',
                'status': 'Failed',
                'description': f'The directory and file ownership is not set to {expected_user}:{expected_group}.',
                'mitigation': f'Set the directory and file ownership to {expected_user}:{expected_group}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.19',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the Kubernetes PKI directory and file ownership is set to root:root',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the directory and files and try again.'
        }
    return result

def run_test_case_1_1_20():
    file_path = '/path/to/kubernetes/pki/certificate/file'
    expected_permissions = '0o600'
    try:
        if check_file_permissions(file_path, expected_permissions):
            result = {
                'no': '1.1.20',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the Kubernetes PKI certificate file permissions are set to 600 or more restrictive',
                'status': 'Passed',
                'description': f'The file permissions are set to {expected_permissions}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.20',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the Kubernetes PKI certificate file permissions are set to 600 or more restrictive',
                'status': 'Failed',
                'description': f'The file permissions are not set to {expected_permissions}.',
                'mitigation': f'Set the file permissions to {expected_permissions}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.20',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the Kubernetes PKI certificate file permissions are set to 600 or more restrictive',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result

def run_test_case_1_1_21():
    file_path = '/path/to/kubernetes/pki/key/file'
    expected_permissions = '0o600'
    try:
        if check_file_permissions(file_path, expected_permissions):
            result = {
                'no': '1.1.21',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the Kubernetes PKI key file permissions are set to 600',
                'status': 'Passed',
                'description': f'The file permissions are set to {expected_permissions}.',
                'mitigation': 'None required.'
            }
        else:
            result = {
                'no': '1.1.21',
                'group': 'Control Plane Components',
                'test_case': 'Ensure that the Kubernetes PKI key file permissions are set to 600',
                'status': 'Failed',
                'description': f'The file permissions are not set to {expected_permissions}.',
                'mitigation': f'Set the file permissions to {expected_permissions}.'
            }
    except Exception as e:
        result = {
            'no': '1.1.21',
            'group': 'Control Plane Components',
            'test_case': 'Ensure that the Kubernetes PKI key file permissions are set to 600',
            'status': 'Warning',
            'description': str(e),
            'mitigation': 'Check the file and try again.'
        }
    return result


def run_all_tests():
    results = []
    results.append(run_test_case_1_1_1())
    results.append(run_test_case_1_1_2())
    results.append(run_test_case_1_1_3())
    results.append(run_test_case_1_1_4())
    results.append(run_test_case_1_1_5())
    results.append(run_test_case_1_1_6())
    results.append(run_test_case_1_1_7())
    results.append(run_test_case_1_1_8())
    results.append(run_test_case_1_1_9())
    results.append(run_test_case_1_1_10())
    results.append(run_test_case_1_1_11())
    results.append(run_test_case_1_1_12())
    results.append(run_test_case_1_1_13())
    results.append(run_test_case_1_1_14())
    results.append(run_test_case_1_1_15())
    results.append(run_test_case_1_1_16())
    results.append(run_test_case_1_1_17())
    results.append(run_test_case_1_1_18())
    results.append(run_test_case_1_1_19())
    results.append(run_test_case_1_1_20())
    results.append(run_test_case_1_1_21())
    return results
